
@{
    ViewBag.Title = "VueTest";
    Layout = "~/Views/Shared/_LayoutEasyUI.cshtml";
}

<div>
    @*<div id="app">
            <p>{{message}}</p>
        </div>*@


    @*<div id="vue_det">
            <h1> site:{{site}}</h1>
            <h2>url:{{url}}</h2>
            <h3>{{details()}}</h3>
        </div>*@

    @*<div id="app">
            <label for="r1">修改颜色</label><input type="checkbox" v-model="class1" id="r1" />
            <br /><br />
            <div v-bind:class="{'class1':class1}">
                v-bind:class 指令
            </div>

        </div>*@

    @*<div id="app">
            {{5+5}}<br />
            {{ok?'yes':'no'}}<br />
            {{message.split('').reverse().join('')}}
            <div v-bind:id="'list-'+id">KIM</div>

        </div>*@

    @*双向绑定
        <div id="app">
            <input v-model="message">
            <input v-model="message">
        </div>*@

    @*<div id="app">
            <p>{{message}}</p>
            <button v-on:click="reverseMessage">反转字符</button>
        </div>*@

    @*<div id="app">
            {{message | capitalize}}
        </div>*@


    @*<div id="app">
            <div v-if="type === 'A'">
                A
            </div>
            <div v-else-if="type === 'B'">
                B
            </div>
            <div v-else-if="type === 'C'">
                C
            </div>
            <div v-else>
                Not A/B/C
            </div>
        </div>*@


    @*<div id="app">
                <ol>
                    <li v-for="site in sites">
                        {{site.name}}
                    </li>
                </ol>

                <ul>
                    <template v-for="site in sites">
                        <li>{{ site.name }}</li>
                        <li>--------------</li>
                    </template>
                </ul>

                <ul>
                    <li v-for="value in object">
                        {{ value }}
                    </li>
                </ul>

                <ul>
                    <li v-for="(value, key) in object">
                        {{ key }} : {{ value }}
                    </li>
                </ul>

                <ul>
                    <li v-for="(value, key, index) in object">
                        {{ index }}. {{ key }} : {{ value }}<ul>
            <li v-for="(value, key, index) in object">
                {{ index }}. {{ key }} : {{ value }}
            </li>
        </ul>
                    </li>
                </ul>

            </div>*@

    @*<div id="computed_props">
            千米 : <input type="text" v-model="kilometers">
            米 : <input type="text" v-model="meters">
        </div>
        <p id="info"></p>*@

    @*<div id="app">
            <div class="static"
                 v-bind:class="{ active: isActive, 'text-danger': hasError }">
            </div>
        </div>*@

    @*<div id="app">
            <div v-bind:style="{color:activeColor,fontSize:fontSize+'px'}">KIM</div>
        </div>*@

    @*<div id="app">
            <button v-on:click="counter +=1">增加+1</button>
            <p>这个按钮被点击了{{counter}}次.</p>
        </div>*@

    @*<div id="app">
            <button v-on:click="greet">Greet</button>
        </div>*@

    @*<div id="app">

            <button v-on:click="say('hi')">Say hi</button>
            <button v-on:click="say('what')">Say what</button>

        </div>*@

    @*<!-- 阻止单击事件冒泡 -->
        <a v-on:click.stop="doThis"></a>
        <!-- 提交事件不再重载页面 -->
        <form v-on:submit.prevent="onSubmit"></form>
        <!-- 修饰符可以串联  -->
        <a v-on:click.stop.prevent="doThat"></a>
        <!-- 只有修饰符 -->
        <form v-on:submit.prevent></form>
        <!-- 添加事件侦听器时使用事件捕获模式 -->
        <div v-on:click.capture="doThis">...</div>
        <!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
        <div v-on:click.self="doThat">...</div>

        <!-- click 事件只能点击一次，2.1.4版本新增 -->
        <a v-on:click.once="doThis"></a>

        <!-- 只有在 keyCode 是 13 时调用 vm.submit() -->
        <input v-on:keyup.13="submit">*@

    @*<div id="app">

            <p>input 元素：</p>
            <input v-model="message" placeholder="编辑..." />
            <p>消息是：{{message}}</p>

            <p>textarea 元素:</p>

            <textarea v-model="message2" placeholder="多行文本输入..."></textarea>
            <p style="white-space:pre">{{message2}}</p>
        </div>*@

    @*<div id="app">
            <p>单个复选框:</p>
            <input type="checkbox" id="checkbox" v-model="checked" />
            <label for="checkbox">{{checked}}</label>

            <p>多个复选框:</p>
            <input type="checkbox" id="apple" value="apple-AP" v-model="checkedNames" />
            <label for="apple">apple</label>
            <input type="checkbox" id="google" value="google-GO" v-model="checkedNames" />
            <label for="google">google</label>
            <input type="checkbox" id="facebook" value="facebook-FB" v-model="checkedNames" />
            <label for="facebook">facebook</label>
            <br />
            <span>选择值：{{checkedNames}}</span>

        </div>*@

    @*<div id="app">
            <input type="radio" id="apple" value="apple"  v-model="picked" />
            <label for="apple">apple</label>
            <br />
            <input type="radio"id="google" value="google" v-model="picked" />
            <label for="google">google</label>
            <br />
            <span>选取值：{{picked}}</span>
        </div>*@

    @*<div id="app">
            <select v-model="selected" name="fruit">
                <option value="">company</option>
                <option value="apple">apple</option>
                <option value="google">google</option>
            </select>

            <div id="output">
                选择:{{selected}}
            </div>

            <input v-model.number="age" type="number">

            <input v-model.trim="msg">
        </div>*@


    @*<div id="app">
        <kimtree>全局组件</kimtree>
    </div>*@

    @*<div id="app">
        <child message="Hello!KIM"></child>
    </div>*@

    @*<div id="app">
        <div>
            <input v-model="parentMsg" />
            <br />
            <child v-bind:message="parentMsg"></child>

        </div>
    </div>*@

    @*<div id="app">
        <ol>
            <todo-item v-for="item in sites" v-bind:todo="item"></todo-item>
        </ol>

    </div>*@

    @*<div id="app">
        <div id="counter-event-example">
            <p>{{total}}</p>
            <button-counter v-on:increment="incrementTotal"></button-counter>
            <button-counter v-on:increment="incrementTotal"></button-counter>
        </div>
    </div>*@


    @*<div id="app">
        <p>input自动获取焦点</p>
        <input v-focuse />
    </div>*@

    @*<div id="app" v-kim:hello.a.b="message"></div>*@

    @*<div id="app">
        <button v-on:click="show =! show">点我</button>

        <transition name="fade">
            <p v-show="show" v-bind:style = "styleobj">动画示例</p>
        </transition>

    </div>*@

    @*<div id="app">
        <button v-on:click="show =!show">启动</button>
        <transition name="slide-fade">
            <p v-if="show">KIMTREE</p>
        </transition>
    </div>*@

    @*<div id="app">
        <p style="font-size:25px;">计数器：{{counter}}</p>
        <button v-on:click="counter++" style="font-size:25px;">点我</button>
    </div>*@

    
    

</div>

<style>
    /*.active {
        width: 100px;
        height: 100px;
        background: green;
    }*/

    /*.text-danger {
        width:50px;
        height:50px;
        background: red;
    }*/

    /*.slide-fade-enter-active {
        transition: all .3s ease;
    }*/

    /*.slide-fade-leave-active {
        transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);
    }*/

    /* .slide-fade-leave-active 用于 2.1.8 以下版本 */
    /*.slide-fade-enter, .slide-fade-leave-to {
        transform: translateX(10px);
        opacity: 0;
    }*/

</style>

<script type="text/javascript">




    //var vm = new Vue({
    //    el: '#app',
    //    data: {
    //        counter: 1
    //    }
    //});

    //vm.$watch('counter', function (nval, oval) {
    //    alert("原始:" + oval + "新值：" + nval);

    //    setTimeout(function () {
    //        vm.counter = 20;
    //    }, 2000);
    //});

   

    //new Vue({
    //    el: '#app',
    //    data: {
    //        show: true
    //    }
    //})


    //var vm = new Vue({
    //    el: '#app',
    //    data: {
    //        show: true,
    //        styleobj: {
    //            fontSize: '30px',
    //            color: '#abcabc'
    //        }
    //    },
    //    methods: {
    //    }
    //});


    //Vue.directive('kim', {
    //    bind: function (el,binding,vnode) {
    //        var s = JSON.stringify
    //        el.innerHTML = 
    //            'name:' + s(binding.name) + '<br/>' +
    //            'value:' + s(binding.value) + '<br/>' +
    //            'expression:' + s(binding.expression) + '<br/>' +
    //            'argument:' + s(binding.arg) + '<br/>' +
    //        'modifiers:' + s(binding.modifiers) + '<br/>' +
    //        'vnode keys:' + Object.keys(vnode).join(',')

    //    }
    //})

    //new Vue({
    //    el: '#app',
    //    data: {
    //        message:'bird want to fly'
    //    }
    //})

    //Vue.directive('focuse', {
    //    inserted: function (el) {
    //        el.focus()
    //    }
    //})

    //new Vue({
    //    el:'#app'
    //})

    //Vue.component('button-counter', {
    //    template: ' <button v-on:click="incrementHandler">{{counter}}</button>',
    //    data: function () {
    //        return {
    //            counter:0
    //        }
    //    },
    //    methods: {
    //        incrementHandler: function () {
    //            this.counter += 1
    //            this.$emit('increment')
    //        }
    //    },
    //})

    //new Vue({
    //    el: '#counter-event-example',
    //    data: {
    //        total:0
    //    },
    //    methods: {
    //        incrementTotal: function () {
    //            this.total += 1
    //        }
    //    }
    //})


    //Vue.component('todo-item', {
    //    props: ['todo'],
    //    template: '<li>{{todo.text}}</li>'
    //});
    //new Vue({
    //    el: '#app',
    //    data: {
    //        sites: [
    //            { text: 'Apple' },
    //            { text: 'Google' },
    //            { text: 'Facebook' }
    //        ]
    //    }
    //})


    //Vue.component('child', {
    //    props: ['message'],
    //    template:'<h1>{{message}}</h1>'
    //});

    //new Vue({
    //    el: '#app',
    //    data: {
    //        parentMsg:'父组件内容'
    //    }
    //});

    //Vue.component('child', {
    //    props: ['message'],
    //    template:'<h1>{{message}}</h1>'
    //});

    //new Vue({
    //    el:'#app'
    //});


    //var Child = {
    //    template: '<h1>自定义局部组件!</h1>'
    //}

    //new Vue({
    //    el: '#app',
    //    components: {
    //        'kimtree': Child
    //    }
    //});

    //Vue.component('kimtree', {
    //    template:'<h1>自定义组件!</h1>'
    //});

    //new Vue({
    //    el:'#app'
    //});

    //new Vue({
    //    el: '#app',
    //    data: {
    //        selected:''
    //    }
    //});

    //new Vue({
    //    el: '#app',
    //    data: {
    //        picked:'apple'
    //    }
    //});

    //new Vue({
    //    el: '#app',
    //    data: {
    //        checked: false,
    //        checkedNames: []
    //    }
    //});

    //new Vue({
    //    el: '#app',
    //    data:{
    //        message: '',
    //        message2:''
    //    }
    //});

        //.enter
        //.tab
        //.delete(捕获 "删除" 和 "退格" 键)
        //.esc
        //.space
        //.up
        //.down
        //.left
        //.right
        //.ctrl
        //.alt
        //.shift
        //.meta

    //new Vue({
    //    el: '#app',
    //    methods: {
    //        say: function (message) {
    //            alert(message);
    //        }
    //    }
    //});

    //var app = new Vue({
    //    el: '#app',
    //    data: {
    //        name:'Vue.js'
    //    },
    //    methods: {
    //        greet: function (event) {
    //            alert('Hello' + this.name + '!');
    //            if (event) {
    //                alert(event.target.tagName);
    //            }
    //        }
    //    }
    //});
    

    //new Vue({
    //    el: '#app',
    //    data:{
    //        counter:0
    //    }
    //});


    //new Vue({
    //    el: '#app',
    //    data: {
    //        activeColor: 'green',
    //        fontSize: 30
    //    }
    //})


    //$(document).ready(function () {
    //    vuejs();
    //});

    //function vuejs() {
    //    var vm = new Vue({
    //        el: '#computed_props',
    //        data: {
    //            kilometers: 0,
    //            meters: 0
    //        },
    //        methods: {
    //        },
    //        computed: {
    //        },
    //        watch: {
    //            kilometers: function (val) {
    //                this.kilometers = val;
    //                this.meters = val * 1000;
    //            },
    //            meters: function (val) {
    //                this.kilometers = val / 1000;
    //                this.meters = val;
    //            }
    //        }
    //    });
    //    // $watch 是一个实例方法
    //    vm.$watch('kilometers', function (newValue, oldValue) {
    //        // 这个回调将在 vm.kilometers 改变后调用
    //        document.getElementById("info").innerHTML = "修改前值为: " + oldValue + "，修改后值为: " + newValue;
    //    })
    //}

    //new Vue({
    //    el: '#app',
    //    data: {
    //        sites: [
    //            { name: 'KIM' }, { name: 'TREE' }, { name: 'Project' }
    //        ],
    //        object: {
    //            name: '菜鸟教程',
    //            url: 'http://www.runoob.com',
    //            slogan: '学的不仅是技术，更是梦想！'
    //        }
    //    }
    //});


    //new Vue({
    //    el: '#app',
    //    data: {
    //        type: 'C'
    //    }
    //})

    //new Vue({
    //    el: '#app',
    //    data: {
    //        message:'kim Project'
    //    },
    //    filters: {
    //        capitalize: function (value) {
    //            if (!value) return ''
    //            value = value.toString()
    //            return value.charAt(0).toUpperCase() + value.slice(1)
    //        }
    //    }
    //});


    //new Vue({
    //    el: '#app',
    //    data: {
    //        message:'KIM project'
    //    },
    //    methods: {
    //        reverseMessage: function () {
    //            this.message = this.message.split('').reverse().join('')
    //        }
    //    }
    //});



    ////双向绑定
    //new Vue({
    //    el: '#app',
    //    data: {
    //        message: 'Runoob!'
    //    }
    //})


    //new Vue({
    //    el: '#app',
    //    data: {
    //        ok: false,
    //        message: 'Tree',
    //        id:1
    //    }
    //});


    //new Vue({
    //    el: '#app',
    //    data: {
    //        class1: true
    //    }
    //})

    //var vm = new Vue({
    //    el: '#vue_det',
    //    data: {
    //        site: "kim",
    //        url: "www.baidu.com",
    //        alexa:"10000"
    //    },
    //    methods:{
    //        details: function () {
    //            return this.site + "--shijienameda,\r\n qianbaonamekong";
    //        }
    //    }
    //});

    //document.write(vm.data == true);
    //document.write("<br/>");
    //document.write(vm.$el === document.getElementById('vue_det'));



    //new Vue({
    //    el: '#app',
    //    data: {
    //        message:'Hello Vue.js!'
    //    }
    //});

</script>




