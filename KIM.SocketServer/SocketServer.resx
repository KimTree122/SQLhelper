<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="dNBM.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="imageList.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>106, 17</value>
  </metadata>
  <data name="imageList.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABq
        FQAAAk1TRnQBSQFMAgEBAgEAAVABAAFQAQABHgEAAR4BAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAF4
        AwABHgMAAQEBAAEYBQABMAEqJAAD+wP0A/MD8QPwA+4B0wHlAdkBsAHZAb0BqwHQAboBqwHJAboBqwHJ
        AboBqwHJAboBqwHJAboBtAHNAcEB2QHjAd4D8QPzA/QD+ycAA/oV9APyA/ED8hL0A/UD/MkAA/8D/QP3
        A/YB9QH4AfYB5gHvAekB3gHpAeIB2gHlAd4BgwHHAZkBDwGfAT8BAAGBATMBAAFmATMBAAFoATMBAQFq
        ATMBBwFqATgBKQF7AVIBoAHAAbAB7AHuAe0B7AH0Ae8B7AHyAe4B9QL2BvwD/QP/DwAD/wP9BvwD9QP3
        A/wG+AH5AvgD+QP6AfMC8gHtAuwD8w74AfcC+AH1AvIB8AP6yQAD/AP1A/MD8QHLAeQB0wF+AccBlgFf
        AbsBfgFeAboBfAE4Aa0BXwEGAZsBOAEAAYEBMwEAAWYBMwEAAXYBMwEHAYUBNwE7AYcBWgFvAZABfwGi
        Aa4BpwGwAcEBtAF+AcEClAHQAaYB3AHoAeAD8QP0A/UD/Q8AA/wD9QP0A/AG7wPiA8YBwwLCAcgCxQHM
        AssD0QHKAsgBwwLBAcYCwwHHAsUBwwPCAsEBxgLEAcYBxQG9AcMBwgGqAtoBzAL5AfjDAAP/A/wD9wP1
        AfMB9wH0AdgB5wHdAZQBzAGnASkBpwFTAQABmQEzAQABmQEzAQABmQEzAQABmQEzAQABhAE2AQABbQE6
        AQABhAE2AQsBmQE6AWMBnwF2AaUCogGjAqABgwGeAYkBMQGbAVABPAGrAV4BpwHQAbUB4AHpAeUB+AH6
        AfkD9AP8CQAD/wP8A/cD9AL3AfYC6wHmAuQB3gLhAd8DyQOjAaACngGnAqMBrgKrA7QBrQKqAaYCogGm
        AqIBoQGgAZ8BjgGWAZEBhAGTAooBmwGPAYsBnQGEAYYBmgFpAb4ByAGuAfcB+AH3wwAD/QP1A/QD9QHU
        AegB2wF7AcYBlAE5Aa0BXwEQAZ4BPwEAAZkBMwEAAZkBMwEAAZkBMwEAAZkBMwEAAZEBQwEAAYgBVQEA
        AZEBQwEMAZoBOwFnAaQBewGrAqkBoQKfAYIBmgGFAUMBmQFPAS4BlwFEAUYBlQFlAYoBuAGhAecB8AHs
        A/QD/AkAA/0D9QP0A/IC5QHfAsYBrgG4AbcBngG6AbgBsQG1ArMDqwGvAq4BtgK0AbkCuAO7AbQCswGt
        AqwBrQKsAZ0BpQGgAVwBiAFyATMBfQFVATUBkQFWATUBmwFSATMBmQFIAZoByAGiAfYB+AH2wwAD/AP0
        AfcB+QH4AdYB4wHcAZoByAGsATQBqQFcAQoBmgE6AR0BnQFIASUBnwFOAScBoQFPASgBogFQASkBowFS
        ASQBoAFiAR0BnAF0AQ4BmwFXAQwBmwFFAWwBqgGFAa8BsQGvAZoBoAGaAXgBlwF6AUQBmAFLAR0BjgE2
        AQgBeAE7AVUBoAF+AdwB6wHkA/QD/AkAA/wD8wL3AfYC5QHeAs0BvQKsAYsBngGdAX8BpQGiAZkBrAKp
        A7MDugO/BsADugO1A7oBpAGzAasBQAGLAWIBAAF4ATUBAAGOATsBAwGcAT0BCAGhAT0BiAHMAZ8B9QH4
        AfbDAAP8A/QB5gHwAesBgQGyAZkBMwGNAVsBEQGVAUEBIwGeAUwBaAGoAX0BhgGvAZQBjAG0AZkBkAG5
        AZ0BlAG9AaIBgQGyAZ8BagGlAZoBMgGfAXcBDQGcAV8BcQGuAZQBsgG4AbIBiwGkAYsBXwGYAWYBKQGZ
        AUQBCgGVAT0BAwGOAVEBVQGyAZAB3AHvAegD9AP8CQAD/APwAusB5wLGAa0BrAGrAYsBpQGjAY4BpQGi
        AZgBrAGqAacBswKyA7oDvgnABr4DzwG+AdABxQFKAaYBawEAAY4BOgEAAZUBTgEKAaMBWAEeAbcBWAGU
        AdgBqwH2AfkB98MAA/wD9AHhAe0B5gFoAaIBgQEWAXsBPgEHAY8BNwExAaIBVwGTAbIBnQO8A8IDxwPN
        AbsBwwHFAaUBtwG6AVUBrwGNARoBqQFsAXgBtgGcAbABuwGyAXIBpgF7AUEBnAFWASgBowFRARsBpwFZ
        ARsBpwFsAXABxgGmAd8B7gHpA/QD/QYAA/oD9QPuAuQB3wK4AZ8BngGdAX8BpQGiAZgBrAKqAbMCsgO7
        A8EGwwPFA8YDwwHBAcIBwQHEAdQBzAGuAdoBwwFMAboBewEQAacBVgEYAacBagEmAbEBdAE5AcUBdAGg
        Ad4BtwH2AfkB98MAA/wD9AHoAfAB6gGMAbQBkgFCAZEBVAEWAZYBPgE1AaUBWgGeAb0BqAPHA8kDzgPU
        AdIC1AHOAtMBdgHKAZkBMwHCAWwBgwHBAZwBqgG7Aa4BTgGmAWkBIAGhAUsBQQG3AXIBUgHCAYcBUgHC
        AY0BoAHYAb4B7gHzAfED+gP+BgAD9AP3A+8B4gHhAeABuwG5AbIBpQGiAZoBqwGqAacDswO6A8EDxwPJ
        A8oDzgPSA8kBvAHBAb4BmgHLAbMBdQHQAaQBRgHHAZEBMQHCAYcBRgHCAYwBVAHFAY8BWgHKAY8BrAHe
        AcMB9wH5AfjDAAP9A/QB6gHtAeoBsgHGAbIBagGjAXQBIwGdAUkBNwGnAVwBpQHEAa8DzwPQAsoDwwGz
        AcYBxQG8AcoCyQGMAcEBnQFYAbsBegF4AcABmwGGAcABqAFcAbABfQFLAa0BcAFpAcIBlwGAAdEBrwGS
        AdoBuAHIAeYB1wH4AvkMAAb1A/AB5ALjAcMCwQGvAq0BtAKzA7oDwQPIA80D0APSA9EGzwHJAc4BywGi
        AcoBtgF5AckBpAFOAcsBnQFHAc8BoAF+AdgBsgGZAd0BuwGZAd0BuwHIAeYB1wH4AvnDAAP/A/wD9QHT
        AdcB0wGQAbQBmgExAaMBVgE5AakBXgGqAckBtQPVA9YCwAGvAqUBfAGmAaQBjQGsAqgBmgGjAZsBhAGh
        AZABYQG4AZkBUwHIAaABhgHAAagBogG+AbIBmAHIAb8BqgHYAdEB2AHwAekB7AHyAe8B+QL6DAAD/AP4
        A+8D6QPNAb0CvAG+Ar0DwQPIA84D0wPXA9sD0APDA9UB4QHiAeEByAHQAcwBowHDAbYBXgHJAaQBWAHV
        AaoBuQHsAdoB6wH4AfEB6wH4AfEB7AHyAe8B+QL6yQAB+AH5AfgBuAHTAckBYAGwAYsBLgGuAV4BQQGx
        AWcBmwG6AaUBvwK+AcICwAGxAbABpAKbAX4BmwGaAYkBngKcAZsBmgGPAZQBmgGFAXoBsAGWAWsBwgGl
        AXwBxAGsAZgBzAG7AcAB2wHXAdoC5wHtAvAD9QP8DwAD/AHNAeMB1AGWAcsBpwGsAcEBswO8A8ICwQG8
        AroBqgK9Aa8CxgHDA8wD0QPKA8ADzQPXA8MBqgG1AbEBgAG9AagBjAHNAbgB2AHpAeQG9AP1A/zJAAH2
        AfgB9wGLAckBtQEUAaQBagEmAbwBZQFMAb0BcgGFAaQBjwGfAp0BpgKjAaABngGdApcBlAGXAZYBlQOX
        ApgBfwGaAZsBbgGjAakBkwGbAbYBrgFhAcMBogF5AdYBuAHjAfAB7Ab8A/0D/w8AAfsB/AH7AaAB0gGw
        ASYBoQFPAXwBrQGMA7gDxQK+AbICpgGAAqQBhAKyAasDugbBA8AGwQGxAq8BpgKkAagBrgGsAcIByQHF
        Ae4C7wb8A/0D/8kAAfsB/AH7AdUB6AHiAa8B2gHIAbcB4gHIAa8B1gG4AZwBqwGPAZIBkQKJAYgBmQF6
        AXkBmwJqAZgCiQGjA68CrgGfAqsBkgGrAaoBnwGYAacBrgFMAaABvgFmAbkB1QHmAe8B8hsAA/0B3AHr
        AeEBqAHRAbYBoQG3AagDrgPFAsMBvAGoAacBkgGJAaABfgFnAaUBeAGAAasBjgGtAbABrQGzArEBswKx
        AbMCsQGzArEBsgKwAbgCtQPPA+cD+OEAAu8B7AK3AZYCiAF3Am0BkgJSAZkCNwGZAnoBsQPMA8YDvgGv
        Aq0BjgGYAa0BNwF5Ad8BVQGWAfgB5AHrAfYhAAP4A8cDowPFAckCyAGuAqsBbgGeAXwBFgGaAUIBQQGc
        AV4BmAGgAZgBpAKgAaQCoAGkAqABpgKiAbUCswPKA+7nAALvAewCtwGWApUBewKQAZ4CiQGqAoABrQKf
        AbkDxgO/A7gBsQKwAZQBpAG1AToBjgHiAVUBqAH4AeQB7QH2IQAD/APrA9YDyQG7AroBqgKnAY4BogGS
        AWgBpgJ9AagBiwGmAaoBpgGrAqoBqwKqAaUBowGUAaABnQGEAaoBpwGdAb8CvgPs5wAC7wHsAbgBtwGZ
        AqIBggKwAakDuQO/AcABvwG9AcEBvQK6AbgBtwazAZsBsAG9ATwBpAHlAVUBuQH4AeQB7wH2JwAD9gPS
        AbMCsgGoAqUBqgKnA7EMswKmAY0BnAGbAW8BoQGeAYwBtQK0AesC6ucAAvAB7gK7AawBqAGnAZkCtwG0
        A70DwAHEAbUBpwHHAakBigHBAbIBpAa6AaIBugHDAT8BuAHoAVUByQH4AeQB8QH2JwAD+wPwAdsC2gG7
        AroBsQKwA7gMugKxAaYCqAGVAasBqgGiAbsCugPs5wAC8AHvAcIBuwG3AbEBqwGmAb4BvQG8BsIBygG0
        AZ0B0wGkAXQBxgGwAZkBuQG6AbsBrgG2AcMBkAG1AdABOAG7Ae0BVQHOAfgB5AHxAfYtAAHxAvABxQHB
        AbsBtQGwAasBvgG9AbwDwQPDAcIBvwG8AcIBuwG0AbsBtwG0A7MDqAOzA+rnAAHyAfAB7QHOAbgBowHC
        AaoBlAHHAcIBvQbIAdoBzAG6Ae4B0AGqAccBuQGnAZ0BogGpAWgBkQHOATcBhQHtARYBhwH4AVUBrAH4
        AeQB7QH2LQAB8AHtAesBvQGmAZIBrAGVAX4BvAG3AbMDxgPOAcwBvAGsAcgBpgGEAcIBsgGiA7UDgwOA
        A+PnAAHyAfAB7QHUAbsBnwHJAa0BkgHLAcYBwAPNA84BzQHUAdIBywHbAdYBnwG2Ab8BcAGUAbEBMAGA
        Ad4BAAFwAf8BAAFwAf8BVQGdAfgB5AHsAfYtAAHwAe0B6gG+AaMBigGuAZIBdwG+AbkBswPKA9UB1AHB
        Aa0BzwGnAX4ByQG2AaMBuAG7AbkBZwF5AW0BWQFwAWAB3QHgAd7nAAHxAvABywHDAbsBwAG2Aa0ByQHH
        AcUDzwPTAZEBwwHiAUQBrwHxATUBowHqASUBlwHlARABkQH0AQABiwH/AQABiwH/AVUBrgH4AeQB7gH2
        LQAB8gHxAfABzgHFAb4BwQG4Aa8BxwHGAcQDzgPWAdgB0gHLAdgBywG9AdABygHEAbwBxAG/AVkBnAFw
        AUQBmAFgAdoB5gHe5wAB7QHwAfIBqAHDAdQBnAG3AcoBxAHKAc0BuwHLAdYBoAHHAeABWgGxAfABDgGZ
        Af8BDgGgAf8BDQGnAf8BBgGnAf8BBwGnAf4BIwGpAfwBdgHBAfUB5wHwAfYtAAPyA9UDyQPLAbkBxAG+
        AaABugGtAb0BywHEA+EBwAHWAccBmAHJAakBQgGuAW4BOgGuAWoB2AHpAeDnAAHnAfAB9QFtAbsB7QFe
        AbEB5wG9Ac4B2AGRAcIB4gE3AagB9AEqAaAB+wEpAZkB/wEpAa8B/wEmAcIB/wERAcIB/wEVAcMB/QFp
        AccB9gG5AdUB8AHvAfMB9S0AA/ID0QPFA8oBiwGsAZsBNgGCAVwBgwGuAZgD5wGYAdkBrgFMAckBeAEh
        Aa4BaAE6Aa4BfwHYAekB4+cAAfEB9QH5AawB1wHzAYIByAHwAYwB0AHmAVYBwwHvAQoBrQH9ASgBqgH/
        AVUBqgH/AV4BxQH/AWEB3AH/ATQB0wH/ATIBzgH6AaUB2wHxAeUB6QHwAvcB+C0AA/cD4gPWA9EBhAGt
        AZkBHgF9AU4BYgGoAYUBvgHgAc8BlgHcAbABcQHWAZUBXwHFAZUBdgHEAakB4QHtAennAAL9Af4B+AH6
        AfsBygHpAfQBSgHSAfYBEQHKAfwBAgHGAf8BQQHFAf8BiwHFAf8BowHgAf8BrwH2Af8BZQHeAf8BVwHT
        AfkB1AHsAfQC+gH7Av0B/i0AA/0D+gPsA90BlQG+AaoBOAGXAWgBUAGvAX8BeAHQAaQBqwHfAcMB1wHs
        Ad8B1AHoAd8B1gHmAeEB8ALy7QAB7gH2AfgBsQHnAfQBZQHSAfYBDQG7Af0BKgHBAf8BWwHMAf8BbAHR
        Af8BdAHVAf8BRAHQAf8BUAHUAfkB3AHvAfU5AAP3A+sBvAHVAcwBaAGyAZcBYQG8AZ0BZgHMAa4BvAHi
        AdYG8APxA/ftAAP+AvwB/QHDAeIB9AEeAaYB+wEFAbMB/wEKAcwB/wEMAbUB/wENAaIB/wEIAboB/wE9
        AdQB+QHZAe8B9TkAA/4D/AHgAeoB6QGdAc4BywF9AcoBxwFmAcwByQHPAegB5wb8A/0D/vMAAewB8wH4
        AbYB2wH0AawB3gHzAawB5QHzAawB3gHzAawB2AHzAawB4AHzAb4B6QH0AfAB9wH5PwAB8wL1AdsC6AHR
        AuUByALlAe0C8/8A/wBFAAFCAU0BPgcAAT4DAAEoAwABeAMAAR4DAAEBAQABAQUAAeABARYAA/8BAAH8
        AgABfwH8AgABcAgAAfACAAEHAcACAAFwCAAB8AIAAQcBwAIAAXAIAAHAAgABBwMAAXAIAAHAAgABBwMA
        AXAIAAHAAgABBwMAAXAIAAHAAgABBwMAAXAIAAHAAgABBgMAAXAIAAHAAgABBgMAAXAIAAHAAgABHgMA
        AXAIAAHAAgABHgMAAXAIAAHwAgABHwMAAXAIAAHwAgABHwMAAXAIAAHwAQABAQH/AgABBwHwCAAB/wEA
        AQEB/wHAAQABHwHwCAAB/wEAAQEB/wHAAQABHwHwCAAB/wEAAQEB/wHwAQABHwHwCAAB/wEAAQEB/wHw
        AQABHwHwCAAB/wEAAQEB/wH8AQABHwHwCAAB/wEAAQEB/wH8AQABHwHwCAAB/wEAAQEB/wH8AQABHwHw
        CAAB/wEAAQEB/wH8AQABHwHwCAAB/wEAAQEB/wH8AQABHwHwCAAB/wEAAQEB/wH8AQABHwHwCAAB/wEA
        AQEB/wH8AQABHwHwCAAB/wEAAQEB/wH8AQABHwHwCAAB/wHAAQcC/wEAAR8B8AgAAf8BwAEHAv8BAAEf
        AfAIAAH/AfABBwL/AcEB/wHwCAAH/wHwCAAL
</value>
  </data>
</root>